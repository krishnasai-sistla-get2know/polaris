name: Build and Publish Apache Polaris Docker Image

on:
  schedule:
    # Run every two weeks on Sunday at midnight
    - cron: '0 0 */14 * 0'
  # Allows manual triggering
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/polaris

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Needed for attestation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'
      
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '8.13'
      
      - name: Clone Apache Polaris repository
        run: |
          git clone https://github.com/apache/polaris.git
          
      - name: Build Polaris Quarkus server
        working-directory: ./polaris
        run: |
          ./gradlew \
            :polaris-quarkus-server:assemble \
            :polaris-quarkus-server:quarkusAppPartsBuild --rerun \
            -Dquarkus.container-image.build=true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD'}}
      
      - name: Get Polaris version and tag
        id: polaris-version
        run: |
          cd polaris
          VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found Polaris version: $VERSION"
          
          # Find the local Docker image
          IMAGE_ID=$(docker images | grep "apache/polaris" | awk '{print $3}' | head -n 1)
          echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT
          echo "Found image ID: $IMAGE_ID"
      
      - name: Tag the image for GitHub packages
        run: |
          IMAGE_ID=${{ steps.polaris-version.outputs.image_id }}
          VERSION=${{ steps.polaris-version.outputs.version }}
          FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
          
          docker tag $IMAGE_ID $FULL_IMAGE_NAME
          docker tag $IMAGE_ID ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "Tagged image $IMAGE_ID as $FULL_IMAGE_NAME"
      
      - name: Push Docker image
        id: push
        run: |
          VERSION=${{ steps.polaris-version.outputs.version }}
          DIGEST=$(docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} | grep digest | awk '{print $3}')
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Pushed image with digest: $DIGEST"
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true