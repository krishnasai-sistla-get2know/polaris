name: Build and Publish Apache Polaris Docker Image

on:
  schedule:
    # Run every day at UTC midnight
    - cron: "0 0 * * *"
  # Allows manual triggering
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/polaris
  TOOL_IMAGE_NAME: ${{ github.repository_owner }}/polaris-admin-tool

jobs:
  build-push-cleanup-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for Release
      packages: write
      id-token: write # Needed for attestation
      actions: read # Required for attestation
      attestations: write

    steps:
      - name: Clone Apache Polaris repository
        run: |
          git clone https://github.com/apache/polaris.git

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"
          working-directory: ./polaris

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: "8.13"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     tags: |
      #       type=raw,value=latest
      #       type=raw,value={{date 'YYYYMMDD'}}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: tool_meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.TOOL_IMAGE_NAME }}
      #     tags: |
      #       type=raw,value=latest
      #       type=raw,value={{date 'YYYYMMDD'}}

      - name: Build Polaris Quarkus server
        working-directory: ./polaris
        run: |
          ./gradlew \
            :polaris-server:assemble \
            :polaris-server:quarkusAppPartsBuild --rerun \
            :polaris-admin:assemble \
            :polaris-admin:quarkusAppPartsBuild --rerun \
            -Dquarkus.container-image.tag=postgres-latest \
            -Dquarkus.container-image.build=true

      - name: Get Polaris Quarkus version and tag
        id: polaris-version
        run: |
          cd polaris
          VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found Polaris version: $VERSION"

          # Find the local Docker image
          IMAGE_ID=$(docker images | grep "apache/polaris" | awk '{print $3}' | head -n 1)
          echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT
          echo "Found image ID: $IMAGE_ID"

      - name: Tag the image for GitHub packages
        run: |
          IMAGE_ID=${{ steps.polaris-version.outputs.image_id }}
          VERSION=${{ steps.polaris-version.outputs.version }}
          FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"

          docker tag $IMAGE_ID $FULL_IMAGE_NAME
          docker tag $IMAGE_ID ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          echo "Tagged image $IMAGE_ID as $FULL_IMAGE_NAME"

      - name: Push Polaris Docker image
        id: push
        run: |
          VERSION=${{ steps.polaris-version.outputs.version }}
          DIGEST=$(docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} | grep digest | awk '{print $3}')
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Pushed image with digest: $DIGEST"

      # - name: Build Polaris Admin Tool server
      #   working-directory: ./polaris
      #   run: |
      #     ./gradlew \
      #       :polaris-quarkus-server:assemble \
      #       :polaris-quarkus-server:quarkusAppPartsBuild --rerun \
      #       :polaris-quarkus-admin:assemble \
      #       :polaris-quarkus-admin:quarkusAppPartsBuild --rerun \
      #       -PeclipseLinkDeps=org.postgresql:postgresql:42.7.4 \
      #       -Dquarkus.container-image.build=true

      - name: Get Polaris Admin Tool version and tag
        id: polaris-tool-version
        run: |
          cd polaris
          VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found Polaris version: $VERSION"

          # Find the admin tool Docker image
          TOOL_IMAGE_ID=$(docker images | grep "apache/polaris-admin-tool" | awk '{print $3}' | head -n 1)
          echo "tool_image_id=$TOOL_IMAGE_ID" >> $GITHUB_OUTPUT
          echo "Found image ID: $IMAGE_ID"

      - name: Tag the tool image for GitHub packages
        run: |
          IMAGE_ID=${{ steps.polaris-tool-version.outputs.tool_image_id }}
          VERSION=${{ steps.polaris-tool-version.outputs.version }}
          FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.TOOL_IMAGE_NAME }}:${VERSION}"

          docker tag $IMAGE_ID $FULL_IMAGE_NAME
          docker tag $IMAGE_ID ${{ env.REGISTRY }}/${{ env.TOOL_IMAGE_NAME }}:latest

          echo "Tagged image $IMAGE_ID as $FULL_IMAGE_NAME"

      - name: Push admin tool Docker image
        id: tool_push
        run: |
          VERSION=${{ steps.polaris-tool-version.outputs.version }}
          DIGEST=$(docker push ${{ env.REGISTRY }}/${{ env.TOOL_IMAGE_NAME }}:${VERSION} | grep digest | awk '{print $3}')
          docker push ${{ env.REGISTRY }}/${{ env.TOOL_IMAGE_NAME }}:latest

          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Pushed image with digest: $DIGEST"

      - name: Delete older package versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: "polaris"
          package-type: "container"
          min-versions-to-keep: 1 # Keep only the most recent version
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete older tool package versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: "polaris-admin-tool"
          package-type: "container"
          min-versions-to-keep: 1 # Keep only the most recent version
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Generate artifact attestation for admin tool
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.TOOL_IMAGE_NAME }}
          subject-digest: ${{ steps.tool_push.outputs.digest }}
          push-to-registry: true

      - name: Check if release exists
        id: check-release
        run: |
          VERSION="${{ steps.polaris-version.outputs.version }}"
          echo "Checking if release with tag $VERSION exists..."

          # Try to fetch the release information
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION")

          # Check if release exists
          if [[ $RELEASE_INFO == *"Not Found"* ]]; then
            echo "No existing release found with tag $VERSION"
            echo "should_create=true" >> $GITHUB_OUTPUT
          else
            echo "Release with tag $VERSION already exists"
            echo "should_create=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create-release
        if: steps.check-release.outputs.should_create == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.polaris-version.outputs.version }}
          release_name: Release ${{ steps.polaris-version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Release of [Apache Polaris](https://github.com/apache/polaris) version ${{ steps.polaris-version.outputs.version }}

            See [Packages](https://github.com/${{ github.repository_owner }}?tab=packages&repo_name=polaris)

            See [CHANGELOG](https://github.com/apache/polaris/commits) for details.
